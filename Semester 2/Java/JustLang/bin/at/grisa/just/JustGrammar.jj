/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(JustGrammar)package at.grisa.just;

public class JustGrammar{
  public static void main(String args []) throws ParseException  {    JustGrammar parser = new JustGrammar(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"a(b)*;\" :");      try      {        switch (parser.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        break;
      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(JustGrammar)SKIP :{  " "| "\r"| "\t"| "\n"}/*TOKEN : /* OPERATORS *//*{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >
}*/

/*TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}*/

//TOKEN: /* IDENTIFIER */
//{
//  < #LETTER : ["A"-"Z","a"-"z"] >
//| < #DIGIT : ["0"-"9"] >
//| < IDENTIFIER : < LETTER > (< LETTER > | < DIGIT >) * >//}

TOKEN :
{
  < A : "a" >
| < B : "b" >
}
int one_line() :
{}
{
  start() ";"
  {
    return 0;
  }
| ";"
  {
    return 1;
  }
}

void start() :
{}
{
  < A > b()
}

void b():
{}
{
  (< B >)*
}

/*int one_line() :{}{  sum() ";"  {    return 0;  }| ";"  {    return 1;  }}void sum() :{}{  term()  (    (      < PLUS >    | < MINUS >    )    term()  )*}void term() :{}{  unary()  (    (      < MULTIPLY >    | < DIVIDE >    )    unary()  )*}void unary() :{}{  < MINUS > element()| element()}void element() :{}{  < CONSTANT >| "(" sum() ")"}
*/
