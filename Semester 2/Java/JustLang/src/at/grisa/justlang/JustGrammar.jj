/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(JustGrammar)
package at.grisa.justlang;
import java.io.InputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import at.grisa.justlang.symbol.*;
import at.grisa.justlang.scope.*;

public class JustGrammar
{
  SymbolTable symbolTable;
  Scope currentScope;

  public static void readFile(String fileName) throws IOException, ParseException
  {
    System.out.println("Reading from file...");
    InputStream content = Files.newInputStream(Paths.get(fileName));
    JustGrammar parser = new JustGrammar(content);
    Scope startScope = new Scope(0);
    parser.currentScope = startScope;
    parser.symbolTable = startScope.localSymbols;
    switch (parser.start())
    {
      case 0 :
      System.out.println("OK.");
      break;
      case 1 : 
      System.out.println("Goodbye.");
      break;
      default : 
      break;
    }
  }

  public static void enterScope(JustGrammar parser)
  {
    Scope newScope = new Scope(parser.currentScope.level++);
    newScope.outerScope = parser.currentScope;
    parser.currentScope = newScope;
    parser.symbolTable = newScope.localSymbols;
  }

  public static void leaveScope(JustGrammar parser)
  {
    Scope newScope = parser.currentScope.outerScope;
    parser.currentScope = newScope;
    parser.symbolTable = newScope.localSymbols;
  }

  public static void main(String args []) throws Exception
  {
    readFile("resources/program.jl");
  }
}

PARSER_END(JustGrammar)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* KEYWORDS */
{
  < PROGRAMSTART : "program" >
| < TYPEVOID : "void" >
| < TYPEINTEGER : "int" >
| < TYPEBOOLEAN : "boolean" >
| < BYREF : "byref" >
| < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < RETURN : "return" >
| < TRUE : "true" >
| < FALSE : "false" >
}

TOKEN : /* IDENTIFIER */
{
  < #LETTER : [ "A"-"Z", "a"-"z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
}

TOKEN : /* NUMBER */
{
  < #DECIMALPOINT : "." >
| < NUMBER :
    < DIGIT >
    (
      (< DIGIT >)*
    |
      (
        (< DIGIT >)* < DECIMALPOINT > (< DIGIT >)*
      )
    ) >
}

TOKEN : /* SYMBOLS */
{
  < SCOPEBEGIN : "{" >
| < SCOPEEND : "}" >
| < INSTRUCTIONEND : ";" >
| < ALLOCATION : "=" >
| < OPENBRACE : "(" >
| < CLOSEBRACE : ")" >
| < COMMA : "," >
| < OR : "||" >
| < AND : "&&" >
}

TOKEN : /* OPERATORS */
{
  < EQUALS : "==" >
| < EQUALSNOT : "!=" >
| < LESSTHAN : "<" >
| < LESSTHANEQUALS : "<=" >
| < GREATERTHAN : ">" >
| < GREATERTHANEQUALS : ">=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < NOT : "!" >
}

int start() :
{}
{
  compilationUnit()
  {
    return 0;
  }
|
  {
    return 1;
  }
}

void compilationUnit() :
{}
{
  < PROGRAMSTART > < IDENTIFIER > < SCOPEBEGIN > definition() < SCOPEEND >
}

void definition() :
{
  Token token;
  Type type;
}
{
  (
    type = type() token = < IDENTIFIER >
    {
      Symbol newSymbol = SymbolFactory.getInstance().createVariableSymbol(token.image, null, type);
    }
    // add to namelist
    (
      variableDefinition(newSymbol)
    | functionDefinition(newSymbol)
    )
  )*
}

void variableDefinition(Symbol symbol) :
{
  symbol.kind = Symbol.Kind.VARIABLE;
}
{
  [ symbol = init(symbol) ]
  {
    symbolTable.insert(symbol);
  }
  < INSTRUCTIONEND >
}

Symbol init(Symbol symbol) :
{
  Token token;
}
{
  < ALLOCATION >
  (
    token = < NUMBER >
    {
      Symbol newSymbol = SymbolFactory.getInstance().createVariableSymbol(token.image, Integer.parseInt(token.image), Type.INT);
      newSymbol.kind = Symbol.Kind.CONSTANT;
      symbolTable.insert(newSymbol);
      symbol.value = Integer.parseInt(token.image);
      symbol.isInitialized = true;
      return symbol;
    }
  | symbol = booleanValue(symbol)
    {
      return symbol;
    }
  )
}

Symbol booleanValue(Symbol symbol) :
{}
{
  < TRUE >
  {
    symbol.value = Boolean.TRUE;
    symbol.isInitialized = true;
    return symbol;
  }
| < FALSE >
  {
    symbol.value = Boolean.FALSE;
    symbol.isInitialized = true;
    return symbol;
  }
}

Type type() :
{
  Type type;
}
{
  < TYPEVOID >
  {
    return Type.VOID;
  }
| < TYPEINTEGER >
  {
    return Type.INT;
  }
| < TYPEBOOLEAN >
  {
    return Type.BOOL;
  }
}

void functionDefinition(Symbol symbol) :
{
  symbol.kind = Symbol.Kind.FUNCTION;
  symbol.isDefined = true;
  symbolTable.insert(symbol);
}
{
  functionHead() block()
}

void functionHead() :
{}
{
  < OPENBRACE > [ formalParameterList() ] < CLOSEBRACE >
}

void formalParameterList() :
{
  Token token;
  Type type;
}
{
  [ < BYREF > ] type = type() token = < IDENTIFIER >
  {
    Symbol newSymbol = SymbolFactory.getInstance().createVariableSymbol(token.image, null, type);
    newSymbol.kind = Symbol.Kind.PARAMETER;
    symbolTable.insert(newSymbol);
  }
  (
    < COMMA > [ < BYREF > ] type = type() token = < IDENTIFIER >
    {
      Symbol newSymbolAdditional = SymbolFactory.getInstance().createVariableSymbol(token.image, null, type);
      newSymbolAdditional.kind = Symbol.Kind.PARAMETER;
      symbolTable.insert(newSymbolAdditional);
    }
  )*
}

void block() :
{
  Token token;
  Type type;
}
{
  {
    JustGrammar.enterScope(this);
  }
  < SCOPEBEGIN >
  (
    type = type() token = < IDENTIFIER >
    {
      Symbol newSymbol = SymbolFactory.getInstance().createVariableSymbol(token.image, null, type);
    }
    variableDefinition(newSymbol)
  | statement()
  )*
  < SCOPEEND >
  {
    JustGrammar.leaveScope(this);
  }
}

void statement() :
{}
{
  < IDENTIFIER >
  (
    assignStatement()
  | callStatement()
  )
| ifStatement()
| whileStatement()
| returnStatement()
| block()
| < INSTRUCTIONEND >
}

void assignStatement() :
{}
{
  < ALLOCATION > expression()
}

void callStatement() :
{}
{
  call()
}

void call() :
{}
{
  < OPENBRACE > [ actualParameterList() ] < CLOSEBRACE >
}

void actualParameterList() :
{}
{
  expression()
  (
    < COMMA > expression()
  )*
}

void ifStatement() :
{}
{
  < IF > < OPENBRACE > expression() < CLOSEBRACE > statement() //[ < ELSE > statement() ]
}

void whileStatement() :
{}
{
  < WHILE > < OPENBRACE > expression() < CLOSEBRACE > statement()
}

void returnStatement() :
{}
{
  < RETURN > [ expression() ] < INSTRUCTIONEND >
}

void expression() :
{}
{
  orExpression()
}

void orExpression() :
{}
{
  andExpression()
  (
    < OR > andExpression()
  )*
}

void andExpression() :
{}
{
  relExpression()
  (
    < AND > relExpression()
  )*
}

void relExpression() :
{}
{
  simpleExpression()
  [
    (
      < EQUALS >
    | < EQUALSNOT >
    | < LESSTHAN >
    | < LESSTHANEQUALS >
    | < GREATERTHAN >
    | < GREATERTHANEQUALS >
    )
    simpleExpression()
  ]
}

void simpleExpression() :
{}
{
  [
    < PLUS >
  | < MINUS >
  ]
  term()
  (
    (
      < PLUS >
    | < MINUS >
    )
    term()
  )*
}

void term() :
{}
{
  notFact()
  (
    (
      < MULTIPLY >
    | < DIVIDE >
    )
    notFact()
  )*
}

void notFact() :
{}
{
  [ < NOT > ] fact()
}

void fact() :
{}
{
  < NUMBER >
| < IDENTIFIER >
  [
    < OPENBRACE > [ actualParameterList() ] < CLOSEBRACE >
  ]
| < OPENBRACE > expression() < CLOSEBRACE >
}
