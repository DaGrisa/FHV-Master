/* Generated By:JavaCC: Do not edit this line. JustGrammar.java */
package at.grisa.just;

import java.io.InputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class JustGrammar implements JustGrammarConstants {
  public static void main(String args []) throws Exception
  {

        System.out.println("Reading from file...");
        InputStream content = Files.newInputStream(Paths.get("resources/program.jl"));
        JustGrammar parser = new JustGrammar(content);
        parser.start();

    /*while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"a(b)*;\" :");
      try
      {
        switch (parser.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        break;
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }*/
  }

  final public int start() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROGRAMSTART:
      compilationUnit();
    {if (true) return 0;}
      break;
    default:
      jj_la1[0] = jj_gen;
    {if (true) return 1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public void compilationUnit() throws ParseException {
    jj_consume_token(PROGRAMSTART);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(SCOPEBEGIN);
    definition();
    jj_consume_token(SCOPEEND);
  }

  final public void definition() throws ParseException {
    type();
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTRUCTIONEND:
    case ALLOCATION:
      variableDefinition();
      break;
    case OPENBRACE:
      functionDefinition();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void variableDefinition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALLOCATION:
      init();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(INSTRUCTIONEND);
  }

  final public void init() throws ParseException {
    jj_consume_token(ALLOCATION);
    jj_consume_token(NUMBER);
  }

  final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPEVOID:
      jj_consume_token(TYPEVOID);
      break;
    case TYPEINTEGER:
      jj_consume_token(TYPEINTEGER);
      break;
    case TYPEBOOLEAN:
      jj_consume_token(TYPEBOOLEAN);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void functionDefinition() throws ParseException {
    functionHead();
    block();
  }

  final public void functionHead() throws ParseException {
    jj_consume_token(OPENBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPEVOID:
    case TYPEINTEGER:
    case TYPEBOOLEAN:
    case BYREF:
      formalParameterList();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(CLOSEBRACE);
  }

  final public void formalParameterList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BYREF:
      jj_consume_token(BYREF);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    type();
    jj_consume_token(IDENTIFIER);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BYREF:
        jj_consume_token(BYREF);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      type();
      jj_consume_token(IDENTIFIER);
    }
  }

  final public void block() throws ParseException {
    jj_consume_token(SCOPEBEGIN);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case IDENTIFIER:
      case SCOPEBEGIN:
      case INSTRUCTIONEND:
      case ALLOCATION:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTRUCTIONEND:
      case ALLOCATION:
        variableDefinition();
        break;
      case IF:
      case WHILE:
      case RETURN:
      case IDENTIFIER:
      case SCOPEBEGIN:
        statement();
        jj_consume_token(INSTRUCTIONEND);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SCOPEEND);
  }

  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALLOCATION:
        assignStatement();
        break;
      case OPENBRACE:
        callStatement();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case IF:
      ifStatement();
      break;
    case WHILE:
      whileStatement();
      break;
    case RETURN:
      returnStatement();
      break;
    case SCOPEBEGIN:
      block();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void assignStatement() throws ParseException {
    jj_consume_token(ALLOCATION);
    expression();
  }

  final public void callStatement() throws ParseException {
    call();
  }

  final public void call() throws ParseException {
    jj_consume_token(OPENBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case NUMBER:
    case OPENBRACE:
    case PLUS:
    case MINUS:
    case NOT:
      actualParameterList();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(CLOSEBRACE);
  }

  final public void actualParameterList() throws ParseException {
    expression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      expression();
    }
  }

  final public void ifStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(OPENBRACE);
    expression();
    jj_consume_token(CLOSEBRACE);
    statement();
  }

  final public void whileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(OPENBRACE);
    expression();
    jj_consume_token(CLOSEBRACE);
    statement();
  }

  final public void returnStatement() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case NUMBER:
    case OPENBRACE:
    case PLUS:
    case MINUS:
    case NOT:
      expression();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(INSTRUCTIONEND);
  }

  final public void expression() throws ParseException {
    orExpression();
  }

  final public void orExpression() throws ParseException {
    andExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
      jj_consume_token(OR);
      andExpression();
    }
  }

  final public void andExpression() throws ParseException {
    relExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      relExpression();
    }
  }

  final public void relExpression() throws ParseException {
    simpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
    case EQUALSNOT:
    case LESSTHAN:
    case LESSTHANEQUALS:
    case GREATERTHAN:
    case GREATERTHANEQUALS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        break;
      case EQUALSNOT:
        jj_consume_token(EQUALSNOT);
        break;
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        break;
      case LESSTHANEQUALS:
        jj_consume_token(LESSTHANEQUALS);
        break;
      case GREATERTHAN:
        jj_consume_token(GREATERTHAN);
        break;
      case GREATERTHANEQUALS:
        jj_consume_token(GREATERTHANEQUALS);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      simpleExpression();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  final public void simpleExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    term();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      term();
    }
  }

  final public void term() throws ParseException {
    notFact();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      notFact();
    }
  }

  final public void notFact() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    fact();
  }

  final public void fact() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENBRACE:
        jj_consume_token(OPENBRACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case NUMBER:
        case OPENBRACE:
        case PLUS:
        case MINUS:
        case NOT:
          actualParameterList();
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(CLOSEBRACE);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      break;
    case OPENBRACE:
      jj_consume_token(OPENBRACE);
      expression();
      jj_consume_token(CLOSEBRACE);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public JustGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0xe00000,0x400000,0x1c0,0x3c0,0x200,0x2000000,0x200,0x693400,0x693400,0xc00000,0x93400,0x850000,0x2000000,0x850000,0x4000000,0x8000000,0xf0000000,0xf0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x850000,0x800000,0x850000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4c,0x0,0x4c,0x0,0x0,0x3,0x3,0xc,0xc,0xc,0xc,0x30,0x30,0x40,0x4c,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public JustGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JustGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JustGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JustGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JustGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JustGrammar(JustGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JustGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
