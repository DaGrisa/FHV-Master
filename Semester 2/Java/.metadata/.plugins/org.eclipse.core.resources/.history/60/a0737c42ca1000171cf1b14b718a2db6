/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(JustGrammar)
package at.grisa.just;

public class JustGrammar
{
  public static void main(String args []) throws ParseException
  {
    JustGrammar parser = new JustGrammar(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"a(b)*;\" :");
      try
      {
        switch (parser.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        break;
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(JustGrammar)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* KEYWORDS */
{
  < PROGRAMSTART : "program" >
| < TYPEVOID : "void" >
| < TYPEINTEGER : "int" >
| < TYPEBOOLEAN : "boolean" >
| < BYREF : "byref" >
| < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < RETURN : "return" >
}

TOKEN : /* IDENTIFIER */
{
  < #LETTER : [ "A"-"Z", "a"-"z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
}

TOKEN : /* NUMBER */
{
  < #DECIMALPOINT : "." >
| < NUMBER :
    < DIGIT >
    (
      (< DIGIT >)*
    |
      (
        (< DIGIT >)* < DECIMALPOINT > (< DIGIT >)*
      )
    ) >
}

TOKEN : /* SYMBOLS */
{
  < SCOPEBEGIN : "{" >
| < SCOPEEND : " }" >
| < INSTRUCTIONEND : ";" >
| < ALLOCATION : "=" >
| < OPENBRACE : "(" >
| < CLOSEBRACE : ")" >
| < COMMA : "," >
| < OR : "||" >
| < AND : "&&" >
}

TOKEN : /* OPERATORS */
{
  < EQUALS : "==" >
| < EQUALSNOT : "!=" >
| < LESSTHAN : "\<" >
| < LESSTHANEQUALS : "\<=" >
| < GREATERTHAN : "\>" >
| < GREATERTHANEQUALS : "\>=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < NOT : "!" >
}

void compilationUnit() :
{}
{
  < PROGRAMSTART > < IDENTIFIER > < SCOPEBEGIN > definition() < SCOPEEND >
}

void definition() :
{}
{
  type() < IDENTIFIER >
  (
    variableDefinition()
  | functionDefinition()
  )
}

void variableDefinition() :
{}
{
  [ init() ] < INSTRUCTIONEND >
}

void init() :
{}
{
  < ALLOCATION > < NUMBER >
}

void type() :
{}
{
  < TYPEVOID >
| < TYPEINTEGER >
| < TYPEBOOLEAN >
}

void functionDefinition() :
{}
{
  functionHead() block()
}

void functionHead() :
{}
{
  < OPENBRACE > [ formalParameterList() ] < CLOSEBRACE >
}

void formalParameterList() :
{}
{
  [ < BYREF > ] type() < IDENTIFIER >
  (
    < COMMA > [ < BYREF > ] type() < IDENTIFIER >
  )*
}

void block() :
{}
{
  < SCOPEBEGIN >
  (
    variableDefinition()
  | stat()
  )*
  < SCOPEEND >
}

void stat() :
{}
{
  assignStat()
| callStat()
| ifStat()
| whileStat()
| returnStat()
| block()
| < INSTRUCTIONEND >
}

void assignStat() :
{}
{
  < IDENTIFIER > < ALLOCATION > expression() < INSTRUCTIONEND >
}

void callStat() :
{}
{
  call() < INSTRUCTIONEND >
}

void call() :
{}
{
  < IDENTIFIER > < OPENBRACE > [ actualParameterList() ] < CLOSEBRACE >
}

void actualParameterList() :
{}
{
  expression()
  (
    < COMMA > expression()
  )*
}

void ifStat() :
{}
{
  < IF > < OPENBRACE > expression() < CLOSEBRACE > stat() [ < ELSE > stat() ]
}

void whileStat() :
{}
{
  < WHILE > < OPENBRACE > expression() < CLOSEBRACE > stat()
}

void returnStat() :
{}
{
  < RETURN > [ expression() ] < INSTRUCTIONEND >
}

void expression() :
{}
{
  orExpression()
}

void orExpression() :
{}
{
  andExpression()
  (
    < OR > andExpression()
  )*
}

void andExpression() :
{}
{
  relExpression()
  (
    < AND > relExpression()
  )*
}

void relExpression() :
{}
{
  simpleExpression()
  (
    < AND > relExpression()
  )*
}
