/* Generated By:JavaCC: Do not edit this line. JustParser.java */
package com.arnorie;

public class JustParser implements JustParserConstants {

  static final public void parse() throws ParseException {
    jj_consume_token(PROGRAM);
    jj_consume_token(IDENT);
    jj_consume_token(BRACE_O);
    definition();
    jj_consume_token(BRACE_C);
  }

  static final public void definition() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case INT:
      case BOOLEAN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case INT:
      case BOOLEAN:
        varDef();
        break;
        funcDef();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void varDef() throws ParseException {
    type();
    jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      init();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOlON);
  }

  static final public void init() throws ParseException {
    jj_consume_token(ASSIGN);
    jj_consume_token(IDENT);
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void funcDef() throws ParseException {
    funcHead();
    block();
  }

  static final public void funcHead() throws ParseException {
    type();
    jj_consume_token(IDENT);
    jj_consume_token(PAR_O);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BYREF:
    case VOID:
    case INT:
    case BOOLEAN:
      formParList();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(PAR_C);
  }

  static final public void formParList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BYREF:
      jj_consume_token(BYREF);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    type();
    jj_consume_token(IDENT);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BYREF:
        jj_consume_token(BYREF);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      type();
      jj_consume_token(IDENT);
    }
  }

  static final public void block() throws ParseException {
    jj_consume_token(BRACE_O);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
    case INT:
    case BOOLEAN:
      varDef();
      break;
    case IF:
    case WHILE:
    case RETURN:
    case BRACE_O:
    case SEMICOlON:
    case IDENT:
      stat();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(BRACE_C);
  }

  static final public void stat() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      assignStat();
      break;
      callStat();
      break;
    case IF:
      ifStat();
      break;
    case WHILE:
      whileStat();
      break;
    case RETURN:
      returnStat();
      break;
    case BRACE_O:
      block();
      break;
    case SEMICOlON:
      jj_consume_token(SEMICOlON);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void assignStat() throws ParseException {
    jj_consume_token(IDENT);
    jj_consume_token(ASSIGN);
    expr();
    jj_consume_token(SEMICOlON);
  }

  static final public void callStat() throws ParseException {
    call();
    jj_consume_token(SEMICOlON);
  }

  static final public void call() throws ParseException {
    jj_consume_token(IDENT);
    jj_consume_token(PAR_O);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAR_O:
    case NOT:
    case PLUS:
    case MINUS:
    case IDENT:
    case NUMBER:
      actParList();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(PAR_C);
  }

  static final public void actParList() throws ParseException {
    expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      expr();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void ifStat() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(PAR_O);
    expr();
    jj_consume_token(PAR_C);
    stat();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      stat();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  static final public void whileStat() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(PAR_O);
    expr();
    jj_consume_token(PAR_C);
    stat();
  }

  static final public void returnStat() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAR_O:
    case NOT:
    case PLUS:
    case MINUS:
    case IDENT:
    case NUMBER:
      expr();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOlON);
  }

  static final public void expr() throws ParseException {
    orExpr();
  }

  static final public void orExpr() throws ParseException {
    andExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      andExpr();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void andExpr() throws ParseException {
    relExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      relExpr();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  static final public void relExpr() throws ParseException {
    simpleExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
    case N_EQUAL:
    case LT:
    case LT_EQ:
    case GT:
    case GT_EQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        break;
      case N_EQUAL:
        jj_consume_token(N_EQUAL);
        break;
      case LT:
        jj_consume_token(LT);
        break;
      case LT_EQ:
        jj_consume_token(LT_EQ);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      case GT_EQ:
        jj_consume_token(GT_EQ);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      simpleExpr();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  static final public void simpleExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    term();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAR_O:
      case NOT:
      case PLUS:
      case MINUS:
      case IDENT:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      term();
    }
  }

  static final public void term() throws ParseException {
    notFact();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIIPLY:
        jj_consume_token(MULTIIPLY);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      notFact();
    }
  }

  static final public void notFact() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    fact();
  }

  static final public void fact() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    case IDENT:
      jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAR_O:
        jj_consume_token(PAR_O);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PAR_O:
        case NOT:
        case PLUS:
        case MINUS:
        case IDENT:
        case NUMBER:
          actParList();
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(PAR_C);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      break;
    case PAR_O:
      jj_consume_token(PAR_O);
      expr();
      jj_consume_token(PAR_C);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JustParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x380,0x380,0x10000,0x380,0x384,0x4,0x8000,0x4,0x47e8,0x4468,0xc801000,0x8000,0x10,0xc801000,0x1000000,0x2000000,0x7e0000,0x7e0000,0xc000000,0xc000000,0xc801000,0xc000000,0xc000000,0x30000000,0x30000000,0x800000,0xc801000,0x1000,0x1000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x3,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x3,};
   }

  /** Constructor with InputStream. */
  public JustParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JustParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JustParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JustParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JustParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JustParser(JustParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JustParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
