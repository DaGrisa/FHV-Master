clearinputMatrix = [1,2;2,1;2,2;2,3;3,1;3,1;3,4;4,5;5,4;6,1;6,2;7,1;7,3;8,2;2,7;6,7];dk = [1;1;1;1;1;1;2;2;2;3;3;3;3;3;4;4];data.inputMatrix = inputMatrix;data.class = dk;amountClasses = 4;maxIterations = 100;[stats, weightMatrix] = PerceptronLearningCGreater2(data, amountClasses, maxIterations);xLowerBound = 1;xUpperBound = 8;yLowerBound = 1;yUpperBound = 7;stepSize = 0.1;for x=1:(xUpperBound-xLowerBound)/stepSize  for y=1:(yUpperBound-yLowerBound)/stepSize    colorMatrix(y,x) = NeuronalNetOutput(weightMatrix,[xLowerBound+x*stepSize;yLowerBound+y*stepSize]);  endendfigure 1imagesc([xLowerBound,xUpperBound],[yLowerBound,yUpperBound],colorMatrix);weightMatrixstatsfigure 1imagesc([xLowerBound,xUpperBound],[yLowerBound,yUpperBound],colorMatrix);hold onplot( data.inputMatrix(1:6,1), data.inputMatrix(1:6,2), 'x',       data.inputMatrix(7:9,1), data.inputMatrix(7:9,2), 'o',      data.inputMatrix(10:14,1), data.inputMatrix(10:14,2), '*',       data.inputMatrix(15:16,1), data.inputMatrix(15:16,2), '+');axis([0,9,0,8]);figure 2      contour(weightMatrix);