function [stats, weightMatrix] = PerceptronLearningCGreater2(data, amountClasses, maxIterations)  [vectorCount, vectorLength] =size(data.inputMatrix);  weightMatrix = rand(vectorLength+1,amountClasses);    featureVectors = initializeFeatureVectors(data.inputMatrix, vectorCount, vectorLength);    solutionFound = false;  iterationCount = 0;  do    numberOfMisclassifications = 0;    iterationCount++;        for i = 1:vectorCount    currentPhi = featureVectors(:,i);      [maximum, foundClass] = max(weightMatrix'*currentPhi);      if(foundClass != data.class(i))        weightMatrix(:,data.class(i))+= currentPhi; % increase weight of desired class, to make it more likely to be selected        weightMatrix(:,foundClass) -= currentPhi; % decrease weight of wrong class, to decrease probability        numberOfMisclassifications++;      end    end        if(numberOfMisclassifications == 0)      solutionFound = true;      break;    end  until iterationCount > maxIterations;    stats.iterationCount = iterationCount;  stats.solutionFound = solutionFound;endfunction featureVectors = initializeFeatureVectors(inputMatrix, vectorCount, vectorLength)  featureVectors = inputMatrix;  featureVectors(:,vectorLength+1) = ones(vectorCount,1);  featureVectors = featureVectors';end