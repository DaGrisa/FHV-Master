function [yParent, fitnessParent, stats] = CanonicalGAPropSelect(populationSize, genomeLength, crossoverProbability, bitMutationProbability, fitnessStop, func, additionalParameters = [])  bitStringPopulation = cell(1,populationSize);  parentBitStringPopulation = cell(1,populationSize);  generationCount = 0;    for i = 1:populationSize    bitStringPopulation(i) = InitializeGenoType(genomeLength);  end    do    fitnessSum = 0;    for j = 1:populationSize      fitnessOffsprings(j) = feval(func, cell2mat(bitStringPopulation(j)), additionalParameters);      fitnessSum += fitnessOffsprings(j);    end        meanFitness = fitnessSum / populationSize;    for k = 1:populationSize      selectionProbabilities(k) = fitnessOffsprings(k)/fitnessSum;    end    stepSize = 2;    for l = 1:stepSize:populationSize      indexParentOne = ProportionateSelection(selectionProbabilities);      parentOne = bitStringPopulation(indexParentOne);      indexParentTwo = ProportionateSelection(selectionProbabilities);      parentTwo = bitStringPopulation(indexParentTwo);            if rand() < crossoverProbability        [bitStringPopulationIntermediate, bitStringPopulationIntermediateNext] = OnePointCrossover(parentOne, parentTwo);      else        bitStringPopulationIntermediate = parentOne;        bitStringPopulationIntermediateNext = parentTwo;      end      parentBitStringPopulation(l) = bitStringPopulationIntermediate;      parentBitStringPopulation(l+1) = bitStringPopulationIntermediateNext;    end    for m = 1:populationSize      bitStringPopulation(m) = Mutation(cell2mat(parentBitStringPopulation(m)), bitMutationProbability);    end    generationCount++;  until meanFitness <= fitnessStop    stats.generationCount;endfunction initializedVector = InitializeGenoType(genomeLength)  for i = 1:genomeLength   initializedVector(i) = round(rand());  endendfunction bitStringPopulationMutation = Mutation(parentBitStringPopulation, bitMutationProbability)  genomeLength = length(parentBitStringPopulation);  bitStringPopulationMutation = parentBitStringPopulation;    for i = 1:genomeLength    if rand < bitMutationProbability      bitStringPopulationMutation(i) = not(bitStringPopulationMutation(i));    end  endendfunction [vectorOneResult, vectorTwoResult] = OnePointCrossover(vectorOne, vectorTwo)vectorOne(1)  vectorSize = size(vectorOne)    if(vectorSize != size(vectorTwo,1))    error(strcat("Different vector sizes in crossover input: ", num2str(vectorSize), " and ", num2str(size(vectorTwo,1))));  end    vectorOneResult = cell(1,vectorSize);  vectorTwoResult = cell(1,vectorSize);    crossoverPoint = round(vectorSize*rand())  vectorOneResult = [vectorOne(1:crossoverPoint-1);vectorTwo(crossoverPoint:end)];  vectorTwoResult = [vectorTwo(1:crossoverPoint-1);vectorOne(crossoverPoint:end)];end% Roulette Wheel Selectionfunction index = ProportionateSelection(selectionProbabilities)  randomProbability = rand();  cummulativeProbabilities = 0;  index = 0;    do    index = index + 1;    cummulativeProbabilities += selectionProbabilities(index);  until(cummulativeProbabilities > randomProbability)end