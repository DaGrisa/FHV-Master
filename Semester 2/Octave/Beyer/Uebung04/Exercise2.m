% Exercise 2 %%%%%%%%%%%%%%%clear all;more off;set (0, "defaultaxesfontname", "Helvetica")set (0, "defaultaxesfontsize", 14)set (0, "defaulttextfontname", "Helvetica")set (0, "defaulttextfontsize", 14) dimensions = {4;8;16;32;64};sigmaParent = 1;sigmaStop = 0;offspringPopulationSize = 12;parentPopulationSize = 3;maxGenerations = 20000;desiredFitness = 10^(-8);runs = 5;ERTHistorySphere = [];for f = 1:size(dimensions)  ERTTotalEvaluationsSphere = 0;  runsToSucc = 0;  for r = 1:runs     dimension = dimensions{f};    yParent = ones(dimension,1)*10;    tau = (2*dimension)^(-1/2);    functionName = 'Sphere';    printf("%s %d\n", functionName, dimension);        searchPath = ones(dimension, 1);    searchPathConstant = 1/sqrt(dimension);    attenuation = sqrt(dimension);    evolutionPath = ones(dimension, 1);    evolutionPathConstant = 1/sqrt(dimension);    covarianceConstant = 2/(dimension + sqrt(2))^2;    covarianceMatrix = eye(dimension, dimension);       [yParent, fitnessParent, stats] = CMSAESRankMu(yParent, sigmaParent, sigmaStop, offspringPopulationSize, parentPopulationSize, functionName, searchPath, searchPathConstant, attenuation, maxGenerations, covarianceConstant, evolutionPathConstant, evolutionPath, covarianceMatrix, desiredFitness);    ERTTotalEvaluationsSphere += stats.functionEvaluationCount;    if(fitnessParent < desiredFitness)      runsToSucc++;    end  end  ERTHistorySphere = [ERTHistorySphere ; (ERTTotalEvaluationsSphere / runsToSucc)];endERTHistoryEllipsoid1 = [];for f = 1:size(dimensions)  ERTTotalEvaluationsEllipsoid1 = 0;  runsToSucc = 0;  for r = 1:runs    dimension = dimensions{f};    yParent = ones(dimension,1)*10;    tau = (2*dimension)^(-1/2);    functionName = 'Ellipsoid1';    printf("%s %d\n", functionName, dimension);       searchPath = ones(dimension, 1);    searchPathConstant = 1/sqrt(dimension);    attenuation = sqrt(dimension);    evolutionPath = ones(dimension, 1);    evolutionPathConstant = 1/sqrt(dimension);    covarianceConstant = 2/(dimension + sqrt(2))^2;    covarianceMatrix = eye(dimension, dimension);       [yParent, fitnessParent, stats] = CMSAESRankMu(yParent, sigmaParent, sigmaStop, offspringPopulationSize, parentPopulationSize, functionName, searchPath, searchPathConstant, attenuation, maxGenerations, covarianceConstant, evolutionPathConstant, evolutionPath, covarianceMatrix, desiredFitness);    ERTTotalEvaluationsEllipsoid1 += stats.functionEvaluationCount;    if(fitnessParent < desiredFitness)      runsToSucc++;    end  end  ERTHistoryEllipsoid1 = [ERTHistoryEllipsoid1 ; (ERTTotalEvaluationsEllipsoid1 / runsToSucc)];endERTHistoryEllipsoid2 = [];for f = 1:size(dimensions)  ERTTotalEvaluationsEllipsoid2 = 0;  runsToSucc = 0;  for r = 1:runs    dimension = dimensions{f};    yParent = ones(dimension,1)*10;    tau = (2*dimension)^(-1/2);    functionName = 'Ellipsoid2';    printf("%s %d\n", functionName, dimension);        searchPath = ones(dimension, 1);    searchPathConstant = 1/sqrt(dimension);    attenuation = sqrt(dimension);    evolutionPath = ones(dimension, 1);    evolutionPathConstant = 1/sqrt(dimension);    covarianceConstant = 2/(dimension + sqrt(2))^2;    covarianceMatrix = eye(dimension, dimension);       [yParent, fitnessParent, stats] = CMSAESRankMu(yParent, sigmaParent, sigmaStop, offspringPopulationSize, parentPopulationSize, functionName, searchPath, searchPathConstant, attenuation, maxGenerations, covarianceConstant, evolutionPathConstant, evolutionPath, covarianceMatrix, desiredFitness);    ERTTotalEvaluationsEllipsoid2 += stats.functionEvaluationCount;    if(fitnessParent < desiredFitness)      runsToSucc++;    end  end  ERTHistoryEllipsoid2 = [ERTHistoryEllipsoid2 ; (ERTTotalEvaluationsEllipsoid2 / runsToSucc)];endERTHistoryRosenbrock = [];for f = 1:size(dimensions)  ERTTotalEvaluationsRosenbrock = 0;  runsToSucc = 0;  for r = 1:runs    dimension = dimensions{f};    yParent = ones(dimension,1)*10;    tau = (2*dimension)^(-1/2);    functionName = 'Rosenbrock';    printf("%s %d\n", functionName, dimension);       searchPath = ones(dimension, 1);    searchPathConstant = 1/sqrt(dimension);    attenuation = sqrt(dimension);    evolutionPath = ones(dimension, 1);    evolutionPathConstant = 1/sqrt(dimension);    covarianceConstant = 2/(dimension + sqrt(2))^2;    covarianceMatrix = eye(dimension, dimension);       [yParent, fitnessParent, stats] = CMSAESRankMu(yParent, sigmaParent, sigmaStop, offspringPopulationSize, parentPopulationSize, functionName, searchPath, searchPathConstant, attenuation, maxGenerations, covarianceConstant, evolutionPathConstant, evolutionPath, covarianceMatrix, desiredFitness);    ERTTotalEvaluationsRosenbrock += stats.functionEvaluationCount;    if(fitnessParent < desiredFitness)      runsToSucc++;    end  end  ERTHistoryRosenbrock = [ERTHistoryRosenbrock ; (ERTTotalEvaluationsRosenbrock / runsToSucc)];endplot1 = figure(1);dimensions = [4;8;16;32;64];loglog(dimensions, ERTHistorySphere, 'r-');hold onloglog(dimensions, ERTHistoryEllipsoid1, 'b-');hold onloglog(dimensions, ERTHistoryEllipsoid2, 'g-');hold onloglog(dimensions, ERTHistoryRosenbrock, 'c-');legend("ERT Sphere", "ERT Ellipsoid1", "ERT Ellipsoid2", "ERT Rosenbrock");title(strcat("Exercise 2 - ERT"));ylabel("ERT(N)");xlabel("N");  print(plot1, strcat("Exercise 2 - ERT", ".png"), "-dpng");