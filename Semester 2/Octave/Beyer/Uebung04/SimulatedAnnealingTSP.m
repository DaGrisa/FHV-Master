%%%%%%%%%%%%%%%%%%%%%%%%% main algorithm %%%%%%%%%%%%%%%%%%%%%%%%%function [yParent, fitnessParent, stats] = SimulatedAnnealingTSP(yParent, initialTemperature, stopTemperature, constantTemperature, temperatureChangefactor, citiesPosition, drawPlot)  generationCount = 1;  fitnessParent = TSP(yParent, citiesPosition);  fitnessHistory(generationCount) = fitnessParent;  temperature = initialTemperature;    acceptedOffspring = 0;  increaseTemperature = true;  do    yOffspring = Lin2Opt(yParent);    fitnessOffspring = TSP(yOffspring, citiesPosition);        if(takeOffspring(fitnessOffspring, fitnessParent, temperature))      yParent = yOffspring;      fitnessParent = fitnessOffspring;      acceptedOffspring++;    end        if(changeTemperature(constantTemperature, generationCount))      % adaptive temperature      if(increaseTemperature)        if(acceptedOffspring/constantTemperature > 0.8)          increaseTemperature = false;        else          temperature = temperature * 1.5;        end        acceptedOffspring = 0;      else        temperature = temperature * temperatureChangefactor;      end    end    generationCount++;    fitnessHistory(generationCount) = fitnessParent;    if(strcmp(drawPlot,"always"))      plotPath(yParent, citiesPosition, fitnessParent, generationCount, temperature);    end  until temperature <= stopTemperature;    stats.generationCount = generationCount;  stats.fitnessHistory = fitnessHistory;  if(strcmp(drawPlot,"last"))    plotPath(yParent, citiesPosition, fitnessParent, generationCount, temperature);  endend%%% helper offspring decision %%%function booleanValue = takeOffspring(fitnessOffspring, fitnessParent, temperature)  betterOffspring = fitnessOffspring < fitnessParent;  acceptableOffspring = exp((fitnessParent-fitnessOffspring)/temperature) > rand();  booleanValue = betterOffspring || acceptableOffspring; end%%% helper temperature change decision %%%function booleanValue = changeTemperature(constantTemperature, generationCount)  booleanValue = (mod(generationCount, constantTemperature) == constantTemperature-1); end%%% TSP function - calculates path weight %%%function [weight] = TSP(citiesPath, citiesCoordinates)  weight = 0;  citiesPathSize = size(citiesPath,1);  for i = 1:citiesPathSize        if(i>1)      xDiffLength = abs(xCoordCity - citiesCoordinates(citiesPath(i),1));      yDiffLength = abs(yCoordCity - citiesCoordinates(citiesPath(i),2));      pathLength = sqrt(xDiffLength^2 + yDiffLength^2);            weight += pathLength;    end        xCoordCity = citiesCoordinates(citiesPath(i),1);    yCoordCity = citiesCoordinates(citiesPath(i),2);      end    xDiffLength = abs(citiesCoordinates(citiesPath(1),1) - citiesCoordinates(citiesPath(citiesPathSize),1));  yDiffLength = abs(citiesCoordinates(citiesPath(1),2) - citiesCoordinates(citiesPath(citiesPathSize),2));  pathLength = sqrt(xDiffLength^2 + yDiffLength^2);        weight += pathLength;end%%% Lin-2-Opt function %%%function [changedPath] = Lin2Opt(originalPath)  % check input  if size(originalPath,1) == 1    originalPath = originalPath';  end  pathSize = size(originalPath,1);    do    firstEdgeIndex = round(rand(1)*pathSize);    secondEdgeIndex = round(rand(1)*pathSize);        if(firstEdgeIndex > secondEdgeIndex)      tempIndex = firstEdgeIndex;      firstEdgeIndex = secondEdgeIndex;      secondEdgeIndex = tempIndex;    end  until firstEdgeIndex < secondEdgeIndex-1 && firstEdgeIndex > 0;  pathToChange = originalPath(firstEdgeIndex:secondEdgeIndex);  changedPath = [originalPath(1:firstEdgeIndex-1);flip(pathToChange);originalPath(secondEdgeIndex+1:end)];end%%% plot path %%%function plotPath(yParent, citiesPosition, fitnessParent, generationCount, temperature)  clf; % clear figure  for i = 1:size(yParent,1)    xValue = citiesPosition(yParent(i),1);    yValue = citiesPosition(yParent(i),2);        plot(xValue,yValue);    hold on;        if(i > 1)      line ([xValue xValueLast], [yValue yValueLast], "linestyle", "-", "color", "r");      hold on    end        xValueLast = xValue;    yValueLast = yValue;  end  line ([citiesPosition(yParent(1),1) xValueLast], [citiesPosition(yParent(1),2) yValueLast], "linestyle", "-", "color", "r");  axis off; % remove axis  title (strcat("Fitness: ", num2str(fitnessParent),", Generation: ", num2str(generationCount), ", Temperature: ", num2str(temperature)));  drawnow(); % refreshend