function [fitnessHistory, sigmaHistory, fitnessParent, generationCount, functionEvaluationCount, fitnessHistoryFunctionEvaluation, sigmaNormHistory, y2History] = CSAES(yParent, sigmaParent, sigmaStop, offspringPopulationSize, parentPopulationSize, targetFunction, searchPath, searchPathConstant, attenuation, maxGenerations)  % initialization  dimensions = size(yParent, 1);    fitnessHistory = [feval(targetFunction, yParent)];  fitnessHistoryFunctionEvaluation = fitnessHistory;  y2History = [(yParent.*yParent)'];  sigmaHistory = [sigmaParent];  sigmaNormHistory = [];    generationCount = 0;  functionEvaluationCount = 1;    %randn("state", 7); % random settings only valid in same scope    do    % empty pools    fitnessPool = [];    childrenPool = [];        % generate offspring    for i = 1:offspringPopulationSize      child.sigma = sigmaParent;            mutation = randn(dimensions, 1);      child.mutation = mutation;      yLambda = yParent + mutation * sigmaParent;      child.y = yLambda;            childrenPool = [childrenPool ; child];            fitnessLambda = feval(targetFunction, yLambda);      functionEvaluationCount++;      fitnessHistoryFunctionEvaluation = [fitnessHistoryFunctionEvaluation ; fitnessLambda];      fitnessPool = [fitnessPool ; fitnessLambda];    end            % recombine best individuals    mutationPool = [];        for j = 1:parentPopulationSize      % choose best child      minFitness = min(fitnessPool);      indexBestChild = find(fitnessPool == minFitness);            % set best value to infinite      fitnessPool(indexBestChild) = inf;            % save values into pools      mutationChild = childrenPool(indexBestChild).mutation;      mutationPool = [mutationPool ; mutationChild'];    end        % recombine mutations    mutationParent = MeanCalc(mutationPool)';        yParent = yParent + sigmaParent * mutationParent;    if(size(yParent,1) != dimensions)      size(yParent,1)      error("yParent wrong dimensions!");    end    y2History = [y2History ; (yParent.*yParent)'];        fitnessParent = feval(targetFunction, yParent);    fitnessHistory = [fitnessHistory ; fitnessParent];        searchPath = (1 - searchPathConstant) * searchPath + sqrt(parentPopulationSize * searchPathConstant * (2 - searchPathConstant)) * mutationParent;    expectedValueXi = sqrt(dimensions) * (1 - dimensions^(-1) / 4 + dimensions^(-2) / 21);    sigmaParent = sigmaParent * exp((norm(searchPath) - expectedValueXi)/(attenuation * expectedValueXi));    sigmaHistory = [sigmaHistory ; sigmaParent];    sigmaNorm = sigmaParent * dimensions / sqrt(fitnessParent);    sigmaNormHistory = [sigmaNormHistory ; sigmaNorm];        generationCount++;  until sigmaParent < sigmaStop || generationCount == maxGenerations;end