function[fitnessParent, yParent, functionEvaluationCount, fitnessHistoryFunctionEvaluation] = InnerES(parentPopulationSize, offspringPopulationSize, isolationTime, sigma, yParent, targetFunction)  dimensions = size(yParent, 1);  functionEvaluationCount = 0;    for i = 1:isolationTime    % empty pools    fitnessPool = [];    childrenPool = [];        % generate offspring    for j = 1:offspringPopulationSize          mutation = randn(dimensions, 1);            yLambda = yParent + mutation * sigma;      child.y = yLambda;      childrenPool = [childrenPool ; child];            fitnessLambda = feval(targetFunction, yLambda);      functionEvaluationCount++;      fitnessPool = [fitnessPool ; fitnessLambda];    end            % recombine best individuals    sigmaPool = [];    yPool = [];    fitnessHistoryFunctionEvaluation = fitnessPool;        for k = 1:parentPopulationSize      % choose best child      minFitness = min(fitnessPool);      indexBestChild = find(fitnessPool == minFitness);            % set best value to infinite      fitnessPool(indexBestChild) = inf;            % save values into pools      yChild = childrenPool(indexBestChild).y;      yPool = [yPool ; yChild'];    end        % set new parent values    yParent = MeanCalc(yPool)';    if(size(yParent,1) != dimensions)      size(yParent,1)      error("yParent wrong dimensions!");    end        fitnessParent = feval(targetFunction, yParent);    functionEvaluationCount++;    fitnessHistoryFunctionEvaluation = [fitnessHistoryFunctionEvaluation ; fitnessParent];  end   end