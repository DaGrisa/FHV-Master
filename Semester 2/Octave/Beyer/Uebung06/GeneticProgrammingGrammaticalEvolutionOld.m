function GeneticProgrammingGrammaticalEvolutionOld(grammar, genomeLength, maxRecursionDepth, referenceFunction, xValues)  randomGenome = getRandomGenome(genomeLength);  codons = genome2Codons(randomGenome);  programCode = getProgramCode(codons, maxRecursionDepth, grammar)  fitness = evaluateFitness(programCode, referenceFunction, xValues)endfunction fitness = evaluateFitness(programCode, referenceFunction, xValues)  fitness = 0;  programCodeWithVariable = strcat('result=',programCode,';');  for i = 1:size(xValues,1)    x = xValues(i);    eval(programCodeWithVariable, 'result=Inf;');    fitnessDifference = abs(feval(referenceFunction,x) - result);    fitness += fitnessDifference;  end    if(isnan(fitness))    fitness = Inf;  endendfunction programCode = getProgramCode(codons, maxRecursionDepth, grammar)  currentRecursionDepth = 1;  currentCodonIndex = 1;  programCodeString = getExpression(codons, currentCodonIndex, currentRecursionDepth, maxRecursionDepth, grammar);  programCode = strrep(programCodeString, ';', '');endfunction genome = getRandomGenome(length)  genome = [];  for i = 1:length    genome(i) = round(rand());  endend              function codons = genome2Codons(genome)  genomeLength = size(genome,2);  codons = [];  codonsIndex = 1;  for i = 1:8:genomeLength    endIndex = i+7;    if(endIndex > genomeLength)      endIndex = genomeLength;    end    newCodon = bin2dec(int2str(genome(i:endIndex)));    codons(codonsIndex++) = newCodon;  end  codons = codons';end              function resolved = resolveNonTerminals(nonTerminalsString, codons, currentCodonIndex, currentRecursionDepth, maxRecursionDepth, grammar)  nonTerminals = strsplit(nonTerminalsString{1},';')';  for i = 1:size(nonTerminals,1)    nonTerminal = nonTerminals{i};    codonsIndex = mod(currentCodonIndex++,size(codons,1))+1;        switch(nonTerminal)      case 'expression'        nonTerminals(i) = getExpression(codons, currentCodonIndex, ++currentRecursionDepth, maxRecursionDepth, grammar);      case 'operation'        nonTerminals(i) = getOperationTerminal(codons(codonsIndex), grammar);      case 'preoperation'        nonTerminals(i) = getPreOperationTerminal(codons(codonsIndex), grammar);      case 'variable'        nonTerminals(i) = getVariable(codons(codonsIndex), grammar);      case 'number'        nonTerminals(i) = getNumber(codons(codonsIndex), grammar);      otherwise        nonTerminals(i) = nonTerminal;    endswitch  end  resolved = strjoin(nonTerminals,';');endfunction expression = getExpression(codons, currentCodonIndex, currentRecursionDepth, maxRecursionDepth, grammar)  codonsIndex = mod(currentCodonIndex++,size(codons,1))+1;  if(++currentRecursionDepth >= maxRecursionDepth)    expression = getNumber(codons(codonsIndex),grammar);  else    arraySize = size(grammar.expressions,1);    arrayIndex = mod(codons(codonsIndex),arraySize) +1;    expression = grammar.expressions(arrayIndex);    expression = resolveNonTerminals(expression, codons, currentCodonIndex, ++currentRecursionDepth, maxRecursionDepth, grammar);  endendfunction variable = getVariable(randomIndex, grammar)  arraySize = size(grammar.variables,1);  arrayIndex = mod(randomIndex,arraySize)+1;  variable = grammar.variables(arrayIndex);endfunction operationTerminal = getOperationTerminal(randomIndex, grammar)  arraySize = size(grammar.operationTerminals,1);  arrayIndex = mod(randomIndex,arraySize)+1;  operationTerminal = grammar.operationTerminals(arrayIndex);endfunction preOperationTerminal = getPreOperationTerminal(randomIndex, grammar)  arraySize = size(grammar.preOperationTerminals,1);  arrayIndex = mod(randomIndex,arraySize)+1;  preOperationTerminal = grammar.preOperationTerminals(arrayIndex);endfunction number = getNumber(randomIndex, grammar)  arraySize = size(grammar.numbers,1);  arrayIndex = mod(randomIndex,arraySize)+1;  number = grammar.numbers(arrayIndex);end