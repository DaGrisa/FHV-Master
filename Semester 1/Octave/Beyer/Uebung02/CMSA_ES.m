% Adapted from Hans-Georg Beyer for educational purposesfunction [x_optim, fHistory, sigmaHistory] = CMSA_ES(mu, lambda, n, sigma, sigma_stop)  global LensParms;  x = LensParms.x_init*ones(n,1);                                   % (L1)  C = eye(n);                                                       % (L1)  tau = 1/sqrt(2*n);  tau_c = 1 + n*(n+1)/(2*mu);                                       % (L1)  fHistory = [LensFunction(x)];  sigmaHistory = [sigma];  while( sigma > sigma_stop ) % (L2)    for l=1:lambda      sigmaTilde(l) = sigma * exp(tau*randn());                     % (L3)      sTilde(:, l) = (det(chol(C))^(-1/n)*chol(C)')*randn(n,1);     % (L4)      xTilde(:, l) = x + sigmaTilde(l)*sTilde(:, l);                % (L5)      fTilde(l) = LensFunction(xTilde(:, l)); % (L6)    end    [fsorted, r] = sort(fTilde, 'ascend');                          % (L7)    x = 1/mu * sum(xTilde(:, r(1:mu)), 2);                          % (L8)    fHistory = [fHistory; LensFunction(x)];        sigma = 1/mu * sum(sigmaTilde(r(1:mu)));                        % (L9)    sigmaHistory = [sigmaHistory; sigma];        SumSS = zeros(n, n);                                            % (L10)    for m=1:mu;       SumSS = SumSS + sTilde(:, r(m))*sTilde(:, r(m))';     end;                                                            % (L10)    C = (1-1/tau_c)*C + (1/tau_c) * (1/mu)*SumSS;                   % (L10)    C = 0.5*(C+C'); % ensure symmetry of C-matrix  end                                                               % (L11)  x_optim = x;endfunction                                                         