#include <msp430.h> 
#include <math.h>

/*
 * main.c
 */

void initialize();
void enableInterrupt();
(void) (callbackFunction*)(double);

int rotationCount;

int main(void) {
	initialize();
	enableInterrupt();

	
	return 0;
}

void initialize(){
	WDTCTL = WDTPW | WDTHOLD;	// Stop watchdog timer
	PM5CTL0 &= ~LOCKLPM5;		// prevents the CPUâ€™s internal boot code to reprogram the port pins after wakeup from low power mode with disabled CPU core

	rotationCount = 0;
}

void enableInterrupt(){
	P1IES = 0x01;				// interrupt enable
	P1IE = 0x01;					// high-to-low transition
}

double getCurrentSpeed(double radiusInMeter, int tick, int secondsPassed){
	double perimeter = 2*radius*PI;
	double length = perimeter * (tick/32);
	return length / secondsPassed;
}

#pragma vector=TIMERA0_VECTOR
__interrupt void Timer_A (void)
{
	callbackFunction(getCurrentSpeed());
	enableInterrupt();
}
